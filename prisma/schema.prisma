// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  // id Int  @id @default(autoincrement())
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user") //maps the model to be assesible under the name users
}

model Product {
  id            String    @id @default(uuid())
  name          String
  description   String
  // richDescription Json?
  price         Float
  discount      Float? // Optional discount percentage
  // category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  brand         String?
  SKU           String? // Unique stock-keeping unit for inventory
  stockQuantity Int // Quantity available in stock
  // images        Image[]
  attributes    Json? // For storing dynamic attributes like size, color, weight
  rating        Float? // Optional rating average
  // reviews       Review[] // Relation to a Review model
  isFavourite   Boolean   @default(false) // If it's a popular or featured item
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? @map("deleted_at")

  @@map("products")
}

// model Category {
//   id       String    @id @default(uuid())
//   name     String
//   parentId String? // Optional for nested categories
//   products Product[]
// }

// model Image {
//   id        String  @id @default(uuid())
//   productId String
//   url       String
//   altText   String?
//   product   Product @relation(fields: [productId], references: [id])
// }

// model Review {
//   id        String   @id @default(uuid())
//   productId String
//   userId    String // ID of the user who submitted the review
//   rating    Int // Rating value (1-5 scale)
//   comment   String?
//   createdAt DateTime @default(now())
//   product   Product  @relation(fields: [productId], references: [id])
// }
