// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderEventStatus {
  PENDING
  PROCESSING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model User {
  // id Int  @id @default(autoincrement())
  id                       String            @id @default(cuid())
  email                    String            @unique
  name                     String?
  role                     Role              @default(USER)
  defaultShippingAddressId String?           @unique
  password                 String
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  cart                     Cart[]
  address                  ShippingAddress[]
  Order                    Order[]

  @@map("user") //maps the model to be assesible under the name users
}

model ShippingAddress {
  id                   String   @id @default(cuid())
  roomNo               Int
  buildingName         String
  street               String
  area                 String?
  landmark             String?
  deliveryInstructions String?
  receiverInformation  String?
  number               String
  userId               String
  user                 User?    @relation(fields: [userId], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  cartId               String?
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  // richDescription Json?
  price         Float
  discount      Float? // Optional discount percentage
  brand         String?
  SKU           String?
  //mark quantity as out of stock if SQ is zero
  stockQuantity Int
  variant       Json? // For storing dynamic attributes like size, color, weight
  rating        Float? // Optional rating average
  reviews       Review[] // Relation to a Review model
  isFavourite   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  images   Image[]
  cart     CartItem[]
  orders   OrderProduct[]
  category Category[]
  recipe   RecipeProducts[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  cartId    String
  productId String   @unique
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  cartItems CartItem[]
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Recipe {
  id         String           @id @default(cuid())
  name       String
  directions String
  duration   String?
  difficulty String?
  ratings    Float?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  image      Image[]
  product    RecipeProducts[]

  @@map("recipes")
}

model Delivery {
  id        String   @id @default(cuid())
endTime  location  String
  price     Float
  startDate DateTime
  endDate   DateTime
  startTime String
     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeProducts {
  id         String   @id @default(cuid())
  // quantity   Int
  productId  String
  recipeId   String
  ingredient Product  @relation(fields: [productId], references: [id])
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id       String    @id @default(cuid())
  name     String
  parentId String?
  Product  Product[]
}

model Image {
  id        String   @id @default(cuid())
  productId String?
  recipeId  String?
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  Recipe    Recipe?  @relation(fields: [recipeId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String // ID of the user who submitted the review
  rating    Int // Rating value (1-5 scale)
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        String           @id @default(cuid())
  netAmount Decimal
  address   String
  userId    String
  status    OrderEventStatus @default(PENDING)
  user      User             @relation(fields: [userId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  products OrderProduct[]
  events   OrderEvent[]
}

model OrderProduct {
  id        String   @id @default(cuid())
  quantity  Int
  orderId   String
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderEvent {
  id        String           @id @default(cuid())
  orderId   String
  status    OrderEventStatus @default(PENDING)
  order     Order            @relation(fields: [orderId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}
